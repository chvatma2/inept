# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: CI-main

on:
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    name: Release Build Test and Static Analysis
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - uses: seanmiddleditch/gha-setup-ninja@v4
    # - uses: KyleMayes/install-llvm-action@v2
    #   with:
    #     version: "17.0"
    - uses: jurplel/install-qt-action@v3.3.0
      with:
        version: '6.6.*'
            
    - run: sudo apt install -y xvfb x11-utils libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 libxcb-xinerama0 libxcb-xfixes0 xdotool clazy clang-tidy gcovr clang-15
    - name: Install newer Clang
      run: |
       wget https://apt.llvm.org/llvm.sh
       chmod +x ./llvm.sh
       sudo ./llvm.sh 17

#     - name: Configure CMake
#
#       # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
#       # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
#       run: cmake --preset "release"
#
#     - name: Build
#       # Build your program with the given configuration
#       run: cmake --build --preset "release"
#
#     - name: Test
#       #working-directory: ${{github.workspace}}/../build-release
#       # Execute tests defined by the CMake configuration.
#       # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
#       run: ctest --preset "release"
#       env:
#         QT_QPA_PLATFORM: offscreen
#         QT_QUICK_BACKEND: software
#
#     - name: Build and test this project
#       run: |
#         cmake --preset "coverage"
#         cmake --build --preset "coverage"
#         ctest --preset "coverage"
#       env:
#         QT_QPA_PLATFORM: offscreen
#         QT_QUICK_BACKEND: software
#
#     - name: Generate a code coverage report
#       run: gcovr ../build-coverage
    - name: Static Analysis Configure
      run: cmake --preset "clazy"

    - name: Static Analysis Build
      run: |
        clazy --version
        cmake --build --preset "clazy"
      env:
        CLANGXX=clang++-17; clazy
